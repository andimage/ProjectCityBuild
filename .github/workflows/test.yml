name: PHP Test

on: push

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Cache localhost certificate
        uses: actions/cache@v2
        id:   cache-certs
        with:
          path: |
            docker/nginx/certs/projectcitybuild.com+2.pem
            docker/nginx/certs/projectcitybuild.com+2-key.pem
          key: ${{ runner.os }}-build-cert-${{ hashFiles('docker/nginx/conf.d/app.conf') }}

      - name: Generate localhost certificate
        if:   steps.cache-certs.outputs.cache-hit != 'true'
        run:  |
          sudo apt-get install libnss3-tools
          brew install mkcert
          mkcert projectcitybuild.com localhost 127.0.0.1
          mv projectcitybuild.com+2.pem docker/nginx/certs
          mv projectcitybuild.com+2-key.pem docker/nginx/certs

      - name: Set-up environment file
        run:  cp .env.ci .env

      - name: Build Docker containers
        run:  docker-compose --env-file ./docker/.env.ci up -d

      - name: Output logs
        run: docker-compose logs

      - name: Check containers are running
        run:  docker ps -a

      - name: Validate composer.json and composer.lock
        run:  docker-compose exec -T php-fpm composer validate

#      - name: Get Composer Cache Directory
#        id: composer-cache
#        run: |
#          echo "::set-output name=dir::$(composer config cache-files-dir)"
#      - uses: actions/cache@v1
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-composer-

      - name: Composer dependencies
        run:  docker-compose exec -T php-fpm composer install --no-interaction

      - name: NPM install
        run:  docker-compose exec -T php-fpm npm ci

      - name: NPM build
        run:  docker-compose exec -T php-fpm npm run prod

      - name: Generate key
        run:  docker-compose exec -T php-fpm php artisan key:generate

      - name: Prepare database
        run:  docker-compose exec -T php-fpm php artisan migrate

      - name: Larastan
        run:  docker-compose exec -T php-fpm ./vendor/bin/phpstan analyse --memory-limit=1G

      - name: PHPUnit
        run:  docker-compose exec -T php-fpm phpdbg -dmemory_limit=1G -qrr vendor/bin/phpunit --coverage-clover tests/coverage/clover.xml; DB_CONNECTION=mysql

      - name: Upload coverage
        run:  docker-compose exec -T php-fpm curl -s https://codecov.io/bash | bash -f
